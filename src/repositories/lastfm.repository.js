const axios = require('axios');
const crypto = require('crypto');
const { LASTFM_URL, LASTFM_KEY, LASTFM_SECRET} = require('../../config');

/**
 * LastFM repository. 
 * Interfaces with Last FM api
 * 
 * 
 * @memberof module:repositories
 * @class LastFmRepository
 * @param {String} url - Url of the API
 * @param {String}  key - Last FM API Key
 * @param {Strint} secret - Last FM client secret
 */

class LastFmRepository{
    constructor(url, key, secret){
        this.url = url + '?format=json&api_key=' + LASTFM_KEY;
        this.key = key;
        this.secret = secret;
    }

    /**
     * Gets info about an album
     * 
     * @function getAlbum
     * @memberof module:repositories.LastFmRepository
     * @this module:repositories.LastFmRepository
     * @param {String} method - Method to call, regarding what info we want to get
     * @param {String} name - Album name
     * @param {String} artist - Album's artist name
     * @param {String} [lang] - Language to retrieve the info in. Defaults to EN
     * @param {Number} [autocorrect] - Wheter or not autocorrect typos. Defaults to 1
     * @returns {Object} - Object containing the matching album data
     * @throws {Object} - Object detailing the error
     * @instance
     * @async
     */
    async getAlbum(method, name, artist, lang="EN", autocorrect = 1){
        let params = {
            method: 'album.' + method,
            album: name,
            artist: artist,
            lang: lang,
            autocorrect: autocorrect,
        }

        const album = await axios.get( this.url, {params: params}).then( (res) => {
            return res.data
        }).catch( (err) => {
            return err.data
        });

        return album;
    }

    /**
     * Gets info about an artist
     * 
     * @function getArtist
     * @memberof module:repositories.LastFmRepository
     * @this module:repositories.LastFmRepository
     * @param {String} method - Method to call, regarding what info we want to get
     * @param {String} name - Artist name
     * @param {String} [lang] - Language to retrieve the info in. Defaults to EN
     * @param {String} [autocorrect] - Wheter or not autocorrect typos. Defaults to 1
     * @param {Number} [page] - Page to fetch
     * @param {Number} [limit] - Items per page
     * @returns {Object} - Object or array of objects containing the matching artist data
     * @throws {Object} - Object detailing the error
     * @instance
     * @async
     */
   async getArtist(method, name, lang="EN", autocorrect = 1, page = null, limit = null){
        let params = {
            method: 'artist.' + method,
            artist: name,
            lang: lang,
            autocorrect: autocorrect,
            page: page,
            limit: limit
        }

        const artist = await axios.get( this.url, {params: params}).then( (res) => {
            return res.data
        }).catch( (err) => {
            return err.data
        });

        return artist;
   }

   /**
     * Sets info about an artist
     * 
     * @function setArtist
     * @memberof module:repositories.LastFmRepository
     * @this module:repositories.LastFmRepository
     * @param {String} method - Wich property we want to set
     * @param {String} name - Name of the artist
     * @param {String | String[]} tags - Comma separated or array of tags to set
     * @param {String} sk - A session key generated by authenticating a user via the authentication protocol
     * @returns {Object} - Object containing the status of the operation
     * @throws {Object} - Object detailing the error
     * @instance
     * @async
     */
   async setArtist(method, name, tags, sk){
       let params = {
           method: 'artist.' + method,
           artist: name,
           sk: sk,
           api_sig: crypto.createHash('md5').update('api_key' + this.key + 'methodartist.' + method + this.secret).digest('hex')
       }

       if(tags.isArray()){
           params.tags = tags.join(',');
       }else{
           params.tags = tags;
       }

       const result = await axios.get( this.url, {params: params}).then( (res) => {
           return res.data;
       }).catch( (err) => {
           return err.data;
       })

       return result;
   }

   /**
     * Gets info about a track
     * 
     * @function getTrack
     * @memberof module:repositories.LastFmRepository
     * @this module:repositories.LastFmRepository
     * @param {String} method - Method to call, regarding what info we want to get
     * @param {String} name - The name of the track
     * @param {String} artist - Name of the artist of the track
     * @param {String} [lang] - Language to retrieve the info in. Defaults to EN
     * @param {Number} [autocorrect] - Wheter or not autocorrect typos. Defaults to 1
     * @param {Number} [limit] - How many results to fetch
     * @returns {Object} - Object containing the matching album data
     * @throws {Object} - Object detailing the error
     * @instance
     * @async
     */
   async getTrack(method, name, artist, limit = null, lang="EN", autocorrect = 1){
        let params = {
            method: 'track.' + method,
            track: name,
            artist: artist,
            lang: lang,
            autocorrect: autocorrect,
            limit: limit,
        }

        const track = await axios.get( this.url, {params: params}).then( (res) => {
            return res.data
        }).catch( (err) => {
            return err.data
        });

        return track;
   }

   /**
     * Sets info about a track
     * 
     * @function setTrack
     * @memberof module:repositories.LastFmRepository
     * @this module:repositories.LastFmRepository
     * @param {String} method - Wich property we want to set
     * @param {String} name - Name of the track
     * @param {String} artist - Name of the artist
     * @param {String | String[]} tags - Comma separated or array of tags to set
     * @param {String} sk - A session key generated by authenticating a user via the authentication protocol
     * @returns {Object} - Object containing the status of the operation
     * @throws {Object} - Object detailing the error
     * @instance
     * @async
     */
   async setTrack(method, name, artist, tags, sk){
        let params = {
            method: 'track.' + method,
            track: name,
            artist: artist,
            sk: sk,
            api_sig: crypto.createHash('md5').update('api_key' + this.key + 'methodartist.' + method + this.secret).digest('hex')
        }

        if(tags.isArray()){
            params.tags = tags.join(',');
        }else{
            params.tags = tags;
        }

        const result = await axios.get( this.url, {params: params}).then( (res) => {
            return res.data;
        }).catch( (err) => {
            return err.data;
        })
 
        return result;
   }

   /**
     * Mark a track as loved in Last FM
     * 
     * @function loveTrack
     * @memberof module:repositories.LastFmRepository
     * @this module:repositories.LastFmRepository
     * @param {String} name - Name of the track
     * @param {String} artist - Name of the artist
     * @param {String} sk - A session key generated by authenticating a user via the authentication protocol
     * @returns {Object} - Object containing the status of the operation
     * @throws {Object} - Object detailing the error
     * @instance
     * @async
     */
   async loveTrack(track, artist, sk){
        let params = {
            method: 'track.love',
            track: track,
            artist: artist,
            sk: sk,
            api_sig: crypto.createHash('md5').update('api_key' + this.key + 'methodartist.' + method + this.secret).digest('hex')
        }

        const result = await axios.get( this.url, {params: params}).then( (res) => {
            return res.data;
        }).catch( (err) => {
            return err.data;
        })

        return result;
    }

    /**
     * Scrobble (mark as played) a track in Last FM
     * 
     * @function loveTrack
     * @memberof module:repositories.LastFmRepository
     * @this module:repositories.LastFmRepository
     * @param {String} name - Name of the track
     * @param {String} artist - Name of the artist of the track
     * @param {String} album - Name of the album
     * @param {String} albumArtist - Name of the album artist
     * @param {Number} duration - Track duration in seconds
     * @param {String} sk - A session key generated by authenticating a user via the authentication protocol
     * @returns {Object} - Object containing the status of the operation
     * @throws {Object} - Object detailing the error
     * @instance
     * @async
     */
   async scrobbleTrack(name, artist, album, albumArtist, duration, sk){
        let params = {
            method: 'track.scrobble',
            artist: artist,
            track: name,
            timestamp: Math.round((new Date()).getTime() / 1000),
            album: album,
            albumArtist: albumArtist,
            duration: duration,
            sk: sk
        }

        const result = await axios.get( this.url, {params: params}).then( (res) => {
            return res.data;
        }).catch( (err) => {
            return err.data;
        })
 
        return result;
   }

   /**
     * Gets top artists, tags or tracks
     * 
     * @function getChart
     * @memberof module:repositories.LastFmRepository
     * @this module:repositories.LastFmRepository
     * @param {String} method - To get tracks, artists or tags
     * @param {Number} page - Page to get
     * @param {Number} limit - Number of results per page
     * @returns {Object} - Object containing the requested data
     * @throws {Object} - Object detailing the error
     * @instance
     * @async
     */
   async getChart(method, page=1, limit=10){
       let params = {
           method: 'chart.' + method,
           page: page,
           limit: limit
       }

       const chart = await axios.get(this.url, { params: params}).then( (res) => {
            return res.data
        }).catch( (err) => {
            return err.data
        });

        return chart;
   }

   /**
     * Gets top artists, tags or tracks geolocated
     * 
     * @function getGeo
     * @memberof module:repositories.LastFmRepository
     * @this module:repositories.LastFmRepository
     * @param {String} method - To get tracks, artists or tags
     * @param {String} country - Country to fetch results for
     * @param {Number} page - Page to get
     * @param {Number} limit - Number of results per page
     * @returns {Object} - Object containing the requested data
     * @throws {Object} - Object detailing the error
     * @instance
     * @async
     */
    async getGeo(method, country, page=1, limit=10){
            let params = {
                method: 'geo.' + method,
                country: country,
                page: page,
                limit: limit
            }

            const geo = await axios.get(this.url, { params: params}).then( (res) => {
                return res.data
            }).catch( (err) => {
                return err.data
            });

            return geo;
    }

    /**
     * Gets info about a tag
     * 
     * @function getTag
     * @memberof module:repositories.LastFmRepository
     * @this module:repositories.LastFmRepository
     * @param {String} method - What info we want to get about tags
     * @param {String} name - Name of the tag
     * @param {String} [lang] - Language to retrieve the info in. Defaults to EN
     * @param {Number} [page] - Page to get
     * @param {Number} [limit] - Number of results per page
     * @returns {Object} - Object containing the requested data
     * @throws {Object} - Object detailing the error
     * @instance
     * @async
     */
    async getTag(method, name, lang = 'EN', page = null, limit = null){
        let params = {
            method: 'tag.' + method,
            tag: name,
            lang: lang,
            page: page,
            limit: limit
        }

        const tag = await axios.get(this.url, { params: params}).then( (res) => {
            return res.data
        }).catch( (err) => {
            return err.data
        });

        return tag;
    }

    /**
     * Gets info about a LastFM authenticated user
     * 
     * @function getUser
     * @memberof module:repositories.LastFmRepository
     * @this module:repositories.LastFmRepository
     * @param {String} method - Operation to realize within the user account
     * @param {String} name - The username to fetch data for
     * @param {Number} [page] - Page to fetch
     * @param {Number} [limit] - Items per page
     * @param {String} [tag] - The tag we're interested in
     * @param {String} [type] - The type of items which have been tagged
     * @param {String} [from] - The date at which the chart should start from
     * @param {String} [to] - The date at which the chart should end
     * @param {String} [period] - The time period over which to retrieve top entities for.
     * @returns {Object} - Object containing the requested data
     * @throws {Object} - Object detailing the err
     * @instance
     * @async
     */
    async getUser(method, name, page = null, limit = null, tag = null, type = null, from = null, to = null, period = null){
        let params = {
            method: 'user.' + method,
            user: name,
            page: page,
            limit: limit,
            tag: tag,
            type: type,
            from: from,
            to: to,
            period: period
        }

        const user = await axios.get(this.url, { params: params}).then( (res) => {
            return res.data
        }).catch( (err) => {
            return err.data
        });

        return user;
    }

    /**
     * Authenticates an user through lastFM
     * 
     * @function getAuth
     * @memberof module:repositories.LastFmRepository
     * @this module:repositories.LastFmRepository
     * @param {String} method - What type of session or token we want to get
     * @param {String} username - The username to log in
     * @param {String} password - Te password to log in
     * @param {String} token - Token to generate the API signature
     * @returns {Object} - Object containing session info
     * @throws {Object} - Object detailing the error
     * @instance
     * @async
     */
    async getAuth(method, username=null, password=null, token){
        let params = {
            method: 'auth.' + method,
            username: username,
            password: password,
            token: token,
            api_sig: crypto.createHash('md5').update('api_key' + this.key + 'methodauth.' + method + this.secret).digest('hex')
        }

        const auth = await axios.get(this.url, { params: params}).then( (res) => {
            return res.data
        }).catch( (err) => {
            return err.data
        });

        return auth;
    }

    /**
     * Performs an artist, album or track search
     * 
     * @function search
     * @memberof module:repositories.LastFmRepository
     * @this module:repositories.LastFmRepository
     * @param {String} type - What we want to search
     * @param {String} query - The string to search for
     * @param {Number} page - Page to fetch
     * @param {Number} limit - Number of results per page
     * @returns {Object} - Object containing the matched data
     * @throws {Object} - Object detailing the error
     * @instance
     * @async
     */
    async search(type, query, page, limit){
        let params = {
            method: type + '.search',
            page: page,
            limit: limit
        }

        params[type] = query;

        const search = axios.get(this.url, {params: params}).then( (res) => {
            return res.data
        }).catch( (err) => {
            return err.data
        });

        return search;
    }
}

module.exports = new LastFmRepository(LASTFM_URL, LASTFM_KEY, LASTFM_SECRET);